"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Scope = function Scope() {
  _classCallCheck(this, Scope);

  _defineProperty(this, "setPassword", function (password) {
    chrome.storage.sync.set({
      password: password
    });
    localStorage.setItem('auth', true);
  });

  _defineProperty(this, "fetchPassword", function () {
    var _this = this;

    this.state.loading = true;
    chrome.storage.sync.get(['password'], function (result) {
      _this.state.userPassword = result;
      _this.state.loading = false;
    });
  });

  this.container = new Container();
  this.state = {
    loading: false,
    userPassword: ''
  };
};
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Container = function Container() {
  var _this2 = this;

  _classCallCheck(this, Container);

  _defineProperty(this, "shove", function (to, newDom) {
    $(to).html(newDom);
  });

  _defineProperty(this, "timeout", function (_int) {
    _int = !!_int ? _int * 1000 * 60 : 10 * 1000 * 60;
    setInterval(function () {
      clear = false;
    }, _int);
  });

  _defineProperty(this, "checker", function () {
    var _this = this;

    setInterval(function () {
      if (!clear) {
        _this.block();
      }
    }, 100);
  });

  _defineProperty(this, "block", function () {
    this.shove('#controllerApp', this.blocker.html());
  });

  _defineProperty(this, "forceLogout", function () {
    localStorage['remember-me'] = false;
    window.location.href = window.location.href;
    localStorage.setItem('auth', 'false');
  });

  var app = document.createElement('div');
  app.id = 'controllerApp';
  $('body').append(app);
  this.blocker = {
    chance: 3,
    time: 10,
    html: function html() {
      return "\n                    <div class=\"container\" id=\"blockedContent\">\n                        <h3>Blocked Content</h3>\n                        <input type=\"password\" placeholder=\"Password\" />\n                        <label id=\"status\">You have ".concat(this.chance, " chances until self-destruct</label>\n                        <div class=\"controller\">\n                            <a class=\"btn btn-primary\">Login</a>\n                            <a class=\"btn btn-secondary\" id=\"logout\" onclick=\"forceLogout()\">Logout</a>\n                        </div>\n                    </div>\n                    ");
    },
    clear: false,
    setEvents: function setEvents() {
      $('#logout').on('click', function (e) {
        _this2.forceLogout();
      });
    }
  };
  this.definePassword = {
    auth: localStorage.getItem('auth'),
    html: function html() {
      return '';
    },
    setEvents: function setEvents() {}
  };

  if (!!localStorage.get(auth)) {
    this.block();
    this.timeout(this.blocker.time);
    this.blocker.setEvents();
  }
};
"use strict";

$(document).ready(function () {
  var scope = new Scope();
});