"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Scope = function Scope() {
  var _this3 = this;

  _classCallCheck(this, Scope);

  _defineProperty(this, "resetPassword", function () {
    chrome.storage.sync.set({
      password: ''
    });
    localStorage.setItem('auth', false);
  });

  _defineProperty(this, "fetchPassword", function () {
    var _this = this;

    var userPassword;
    this.loading = true;
    chrome.storage.sync.get(['userPassword'], function (result) {
      userPassword = result.userPassword;

      if (typeof userPassword === 'string' && userPassword.length >= 4) {
        _this.define(userPassword);
      }
    });
  });

  _defineProperty(this, "define", function (pass) {
    this.loading = false;
    this.manager.userPassword = pass;
    this.manager.status = 'CONNECTED';
  });

  this.container = new Container();
  this.loading = false;
  this.manager = {
    userPassword: this.fetchPassword(),
    domPassword: '',
    status: 'NO_CONNECTION'
  }; // **
  // * Adicionar Event Handler do acesso

  this.handler = function () {
    var _this2 = this;

    $('#blockedContent').addClass('hasEvent');
    $('#blockedContent').find('[login]').on('click', function (e) {
      e.preventDefault();

      if (_this2.container.blocker.passwordTyped === _this2.manager.userPassword) {
        _this2.container.breakStep();

        _this2.container.timeout();
      } else {
        _this2.container.badLogin();
      }
    });
  };

  setInterval(function () {
    if (!!$('#blockedContent').length && !$('#blockedContent').hasClass('hasEvent')) {
      _this3.handler();
    }
  }, 100);
};
"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Container = function Container() {
  var _this = this;

  _classCallCheck(this, Container);

  _defineProperty(this, "base", function () {
    var $app, app;
    $app = $('#controllerApp');

    if (!!$app.length) {
      return $app;
    } else {
      app = document.createElement('div');
      app.id = 'controllerApp';
      $('body').append(app);
      $app = $('#controllerApp');
      return $app;
    }
  });

  _defineProperty(this, "shove", function (to, newDom) {
    $(to).html(newDom);
  });

  _defineProperty(this, "timeout", function () {
    if (!this.auth.running) {
      this.auth.running = true;
      this.auth.countDown();
    }
  });

  _defineProperty(this, "block", function () {
    var bool;
    bool = localStorage.getItem('auth');
    bool = bool.includes('true') ? true : false;
    this.auth.interval = false;

    if (bool) {
      this.shove(this.base(), this.blocker.html());
      this.blocker.setEvents();
    } else {
      this.shove(this.base(), this.definePassword.html());
      this.definePassword.setEvents();
    }
  });

  _defineProperty(this, "forceLogout", function () {
    localStorage['remember-me'] = false;
    localStorage.setItem('auth', 'false');
    window.location.href = window.location.href;
  });

  _defineProperty(this, "refresh", function () {
    var status;

    if (this.step === 'blocker') {
      $('#blockedContent').remove();
      this.block();
    }
  });

  _defineProperty(this, "badLogin", function () {
    var $container, chances;

    if (!localStorage.getItem('loginChance')) {
      localStorage.setItem('loginChance', 3);
    }

    chances = function chances(command) {
      var value;

      if (command === 'sub') {
        value = localStorage.getItem('loginChance');
        value = parseFloat(value);
        value--;
      } else {
        value = parseFloat(localStorage.getItem('loginChance'));
      }

      return value;
    };

    localStorage.setItem('loginChance', chances('sub'));

    if (this.blocker.chance === 0) {
      this.forceLogout();
      return;
    }

    this.refresh();
  });

  _defineProperty(this, "setPassword", function (password) {
    chrome.storage.sync.set({
      userPassword: password
    });
    localStorage.setItem('auth', true);
    localStorage.setItem('loginChance', 3);
  });

  _defineProperty(this, "breakStep", function () {
    var $container;
    this.auth.interval = true;
    $container = $('#controllerApp').remove();
    this.timeout();
    localStorage.setItem('loginChance', 3);
  });

  _defineProperty(this, "getInputPassword", function () {
    var $container, $input;
    $container = $('#blockedContent');

    if (!$container.length) {
      return 'Algo deu errado.';
    }

    $input = $container.find('input');
    return $input.val();
  });

  this.step = 'NULL';
  this.blocker = {
    chance: function chance() {
      return parseFloat(localStorage.getItem('loginChance'));
    },
    time: 20,
    html: function html() {
      this.defineStep();
      return "\n                    <div class=\"container\" id=\"blockedContent\">\n                        <h3>Blocked Content</h3>\n                        <input type=\"password\" result placeholder=\"Password\" />\n                        <label id=\"status\">You have ".concat(this.chance(), " chances until self-destruct</label>\n                        <div class=\"controller\">\n                            <a class=\"btn btn-primary\" login>Login</a>\n                            <a class=\"btn btn-secondary\" logout>Logout</a>\n                        </div>\n                    </div>\n                    ");
    },
    passwordTyped: '',
    setEvents: function setEvents() {
      $('#blockedContent [logout]').on('click', function (e) {
        _this.forceLogout();
      });
      $('#blockedContent [result]').on('keyup', function (e) {
        _this.blocker.passwordTyped = e.currentTarget.value;
      });
    },
    defineStep: function defineStep() {
      _this.step = 'blocker';
    }
  };
  this.auth = {
    running: false,
    interval: false,
    countDown: function countDown() {
      var counter = 0;
      setInterval(function () {
        if (!!_this.auth.interval) {
          counter++;
        }

        if (counter === 10 && _this.auth.interval) {
          counter = 0;

          _this.block();
        }
      }, _this.blocker.time * 100);
    }
  };
  this.definePassword = {
    auth: localStorage.getItem('auth'),
    html: function html() {
      this.step = 'definePassword';
      return "\n                    <div class=\"container\" id=\"register\">\n                        <h3>Registre sua senha</h3>\n                        <div class=\"wrap\">\n                            <input type=\"password\" placeholder=\"nova senha\" />\n                            <input type=\"password\" placeholder=\"digite novamente\" />\n                        </div>\n                        <a href=\"#\" class=\"btn btn-primary\" id=\"submit\">Registrar</a>\n                        <label for=\"error\"></label>\n                    </div>\n                    ";
    },
    setEvents: function setEvents() {
      $('#register').find('.toggle-view').on('click', function (e) {
        var $self, type;
        e.preventDefault();
        $self = $(e.currentTarget);
        $self = $self.parent().find('input');
        type = $self.attr('type');
        type = type === 'password' ? 'text' : 'password';
        $self.attr('type', type);
      });
      $('#register').find('#submit').on('click', function (e) {
        var $inputs;
        e.preventDefault();
        $('#register').find('label').text('');
        $inputs = $('#register').find('input');

        if ($inputs.eq(0).val() === $inputs.eq(1).val() && $inputs.eq(0).val().length >= 4 && $inputs.eq(1).val() >= 4) {
          _this.setPassword($inputs.eq(0).val());

          _this.breakStep();
        } else {
          $('#register').find('label').text('A senha não bate ou é muito curta');
        }
      });
    }
  };
  this.refreshHandler = {
    blocker: function blocker() {
      $('#blockedContent').remove();
      this.block();
    },
    definePassword: function definePassword() {
      $('#register').remove();
      this.block();
    }
  };
  this.block();
};
"use strict";

$(document).ready(function () {
  var scope = new Scope(); // scope.resetPassword();
});